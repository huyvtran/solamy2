{"version":3,"file":"html-escape-unescape.umd.min.js","sources":["~/html-escape-unescape/src/app/html-escape-unescape/config.ts","~/html-escape-unescape/src/app/html-escape-unescape/escape.ts","~/html-escape-unescape/src/app/html-escape-unescape/unescape.ts","~/html-escape-unescape/src/app/html-escape-unescape/pipes/escape.pipe.ts","~/html-escape-unescape/src/app/html-escape-unescape/pipes/unescape.pipe.ts","~/html-escape-unescape/src/app/html-escape-unescape/html-escape-unescape.module.ts"],"sourcesContent":["export const /** @type {?} */ BLACKLIST = [\n    `<`,\n    `>`,\n    `&`,\n    `'`,\n    `\"`,\n    `\\``,\n    ` `,\n    `!`,\n    `@`,\n    `$`,\n    `%`, \n    `(`,\n    `)`, \n    `=`, \n    `+`, \n    `{`, \n    `}`, \n    `[`, \n    `]`\n];\n\nexport const /** @type {?} */ HTMLSafe = {\n    '<': ['&lt;', '&#60;', '&#x3C'],\n    '>': ['&gt;', '&#62;', '&#x3E'],\n    '&': ['&amp;', '&#38;', '&#x26'],\n    '\\'': ['&#39;', '&#x27'],\n    '\"': ['&quot;', '&#34;', '&#x22'],\n    '`': ['&#96;', '&#x60'],\n    ' ': ['&nbsp;', '&#32;', '&#x20'],\n    '!': ['&#33;', '&#x21'],\n    '@': ['&#64;', '&#x40'],\n    '$': ['&#36;', '&#x24'],\n    '%': ['&#37;', '&#x25'],\n    '(': ['&#40;', '&#x28'],\n    ')': ['&#41;', '&#x29'], \n    '=': ['&#61;', '&#x3D'], \n    '+': ['&#43;', '&#x2B'], \n    '{': ['&#123;', '&#x7B'], \n    '}': ['&#125;', '&#x7D'], \n    '[': ['&#91;', '&#x5B'], \n    ']': ['&#93;', '&#x5D'],\n};\n\nexport const /** @type {?} */ BAD_REQUEST_ERR_MSG = `Invalid parameter supplied to the pipe. Refer to the docs at https://www.npmjs.com/package/html-escape-unescape to see the correct usage.`;\nexport const /** @type {?} */ DEEP_ARG = 'recursive';\nexport const /** @type {?} */ DOCS_LINK = 'https://www.npmjs.com/package/html-escape-unescape';\n","import * as _h from 'he';\nimport { BAD_REQUEST_ERR_MSG, DEEP_ARG, DOCS_LINK } from './config';\nexport class Escape {\nconstructor() {\n    }\n/**\n * Escapes HTML entities from a string.\n * @param {?} value\n * @param {?=} arg\n * @return {?}\n */\nit(value: any, arg?: string | number) {\n        if (value === null || value === undefined) {\n            throw BAD_REQUEST_ERR_MSG;\n        }\n        value = value.toString();\n\n        if (arg === undefined || arg === null) {\n            return this.escapeString(value);\n        }\n        if (typeof arg == 'number') {\n            return this.uptoLevel(value, arg);\n        }\n        if (typeof arg == 'string') {\n            if (arg === DEEP_ARG){\n                throw 'No :deep on Escape.';\n            }\n        }\n        if (typeof arg ==  'object') {\n            throw `No options for Escape. Refer to the docs at ${DOCS_LINK} to see the correct usage.`;\n        }\n\n        throw BAD_REQUEST_ERR_MSG;\n    }\n/**\n * Escapes HTML entities from a string.\n * @param {?} rawInput\n * @return {?}\n */\nescapeString(rawInput: string): string {\n\n        return _h.escape(rawInput);\n    }\n/**\n * Performs HTML escaping, levels number of times.\n * @param {?} rawInput\n * @param {?} levels\n * @return {?}\n */\nuptoLevel(rawInput: string, levels: number): string {\n        let /** @type {?} */ escapedString = rawInput;\n        while (levels--) {\n            escapedString = this.escapeString(escapedString);\n        }\n\n        return escapedString;\n    }\n\n}","import * as _h from 'he';\nimport { BAD_REQUEST_ERR_MSG, DEEP_ARG } from './config';\nexport class Unescape {\n\n    optionsObject: any = null;\nconstructor() {\n    }\n/**\n * Unescapes a string of escaped html values.\n * @param {?} value\n * @param {?=} arg\n * @param {?=} options\n * @return {?}\n */\nit(value: any, arg?: string | number, options?: any) {\n        if (value === null || value === undefined) {\n            throw BAD_REQUEST_ERR_MSG;\n        }\n        if (options !== undefined && typeof options !== 'object') {\n            throw BAD_REQUEST_ERR_MSG;\n        }\n        value = value.toString();\n\n        if (arg === undefined || arg === null) {\n           return this.unescapeString(value);\n        }\n        if (typeof arg == 'number') {\n            return this.uptoLevel(value, arg);\n        }\n        if (typeof arg == 'string') {\n            if (arg !== DEEP_ARG) {\n                throw BAD_REQUEST_ERR_MSG;\n            }\n            \n            return this.inDeepMode(value);\n        }\n        if (typeof options ==  'object' || (typeof arg == 'object' && typeof options === 'undefined')) {\n            this.optionsObject = options || arg;\n\n            return this.unescapeString(value);\n        }\n\n        throw BAD_REQUEST_ERR_MSG;\n    }\n/**\n * Unescapes HTML entities from a string.\n * @param {?} rawInput\n * @return {?}\n */\nunescapeString(rawInput: string): string {\n    \n        return this.optionsObject !== undefined && this.optionsObject !== null ? _h.unescape(rawInput, this.optionsObject) : _h.unescape(rawInput);\n    }\n/**\n * Performs HTML unescaping, levels number of times.\n * @param {?} rawInput\n * @param {?} levels\n * @return {?}\n */\nuptoLevel(rawInput: string, levels: number ): string {\n        let /** @type {?} */ unescapedString = rawInput;\n        while(levels--) {\n            unescapedString = this.unescapeString(unescapedString);\n        }\n\n        return unescapedString;\n    }\n/**\n * Performs HTML unescaping untill the string is fully Unescaped.\n * @param {?} rawInput\n * @return {?}\n */\ninDeepMode(rawInput: string): string {\n        let /** @type {?} */ unescaped: string = _h.unescape(rawInput);\n\n        while (unescaped.length !== rawInput.length) {\n            rawInput = unescaped;\n            unescaped = _h.unescape(rawInput);\n        }\n\n        return unescaped;\n    }\n\n}\n\nfunction Unescape_tsickle_Closure_declarations() {\n/** @type {?} */\nUnescape.prototype.optionsObject;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Escape } from '../escape';\nexport class EscapePipe implements PipeTransform {\n/**\n * @param {?} escape\n */\nconstructor(private escape: Escape) {}\n/**\n * Pipe method to HTML escape. Use method it(string, number|string, object) instead.\n * @param {?} value\n * @param {?=} arg\n * @return {?}\n */\ntransform(value: any, arg?: number | string): string {\n    if (value === null || value === undefined) {\n      throw `The input value to the pipe must be a string or a string convertible value like number, booleans, etc.`;\n    }\n\n    return this.escape.it(value.toString(), arg);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'escape'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Escape, },\n];\n}\n\nfunction EscapePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nEscapePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEscapePipe.ctorParameters;\n/** @type {?} */\nEscapePipe.prototype.escape;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Unescape } from '../unescape';\nexport class UnescapePipe implements PipeTransform {\n/**\n * @param {?} unescape\n */\nconstructor(private unescape: Unescape) {}\n/**\n * Pipe method to HTML unescape. Use method it(string, string|number, object) instead.\n * @param {?} value\n * @param {?=} arg\n * @return {?}\n */\ntransform(value: any, arg?: number | string): string {\n    if (value === null || value === undefined) {\n      throw `The input value to the pipe must be a string or a string convertible value like number, booleans, etc.`;\n    }\n\n    return this.unescape.it(value.toString(), arg);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'unescape'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Unescape, },\n];\n}\n\nfunction UnescapePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nUnescapePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUnescapePipe.ctorParameters;\n/** @type {?} */\nUnescapePipe.prototype.unescape;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { Escape } from './escape';\nimport { Unescape } from './unescape';\nimport { EscapePipe, UnescapePipe } from './pipes';\n\nconst /** @type {?} */ pipes = [\n  EscapePipe,\n  UnescapePipe\n]\n\nconst /** @type {?} */ services = [\n  Escape,\n  Unescape\n]\nexport class HTMLEscapeUnescapeModule {\n  // static forRoot(): ModuleWithProviders {\n  //   return {\n  //     ngModule: HTMLEscapeUnescapeModule,\n  //     providers: [...services]\n  //   }\n  // }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [...pipes],\n  exports: [...pipes],\n  providers: [...services]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HTMLEscapeUnescapeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHTMLEscapeUnescapeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHTMLEscapeUnescapeModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["BAD_REQUEST_ERR_MSG","Escape","prototype","it","value","arg","undefined","toString","this","escapeString","uptoLevel","rawInput","_h.escape","levels","escapedString","Unescape","optionsObject","options","unescapeString","inDeepMode","_h.unescape","unescapedString","unescaped","length","EscapePipe","escape","transform","decorators","type","Pipe","args","name","ctorParameters","UnescapePipe","unescape","pipes","services","HTMLEscapeUnescapeModule","NgModule","imports","CommonModule","declarations","slice","exports","providers"],"mappings":"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"}
