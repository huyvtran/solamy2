import { NgModule, Pipe } from '@angular/core';
import { CommonModule } from '@angular/common';
import { escape, unescape } from 'he';
var BAD_REQUEST_ERR_MSG = "Invalid parameter supplied to the pipe. Refer to the docs at https://www.npmjs.com/package/html-escape-unescape to see the correct usage.";
var DEEP_ARG = 'recursive';
var DOCS_LINK = 'https://www.npmjs.com/package/html-escape-unescape';
var Escape = (function () {
    function Escape() {
    }
    /**
     * Escapes HTML entities from a string.
     * @param {?} value
     * @param {?=} arg
     * @return {?}
     */
    Escape.prototype.it = function (value, arg) {
        if (value === null || value === undefined) {
            throw BAD_REQUEST_ERR_MSG;
        }
        value = value.toString();
        if (arg === undefined || arg === null) {
            return this.escapeString(value);
        }
        if (typeof arg == 'number') {
            return this.uptoLevel(value, arg);
        }
        if (typeof arg == 'string') {
            if (arg === DEEP_ARG) {
                throw 'No :deep on Escape.';
            }
        }
        if (typeof arg == 'object') {
            throw "No options for Escape. Refer to the docs at " + DOCS_LINK + " to see the correct usage.";
        }
        throw BAD_REQUEST_ERR_MSG;
    };
    /**
     * Escapes HTML entities from a string.
     * @param {?} rawInput
     * @return {?}
     */
    Escape.prototype.escapeString = function (rawInput) {
        return escape(rawInput);
    };
    /**
     * Performs HTML escaping, levels number of times.
     * @param {?} rawInput
     * @param {?} levels
     * @return {?}
     */
    Escape.prototype.uptoLevel = function (rawInput, levels) {
        var /** @type {?} */ escapedString = rawInput;
        while (levels--) {
            escapedString = this.escapeString(escapedString);
        }
        return escapedString;
    };
    return Escape;
}());
var Unescape = (function () {
    function Unescape() {
        this.optionsObject = null;
    }
    /**
     * Unescapes a string of escaped html values.
     * @param {?} value
     * @param {?=} arg
     * @param {?=} options
     * @return {?}
     */
    Unescape.prototype.it = function (value, arg, options) {
        if (value === null || value === undefined) {
            throw BAD_REQUEST_ERR_MSG;
        }
        if (options !== undefined && typeof options !== 'object') {
            throw BAD_REQUEST_ERR_MSG;
        }
        value = value.toString();
        if (arg === undefined || arg === null) {
            return this.unescapeString(value);
        }
        if (typeof arg == 'number') {
            return this.uptoLevel(value, arg);
        }
        if (typeof arg == 'string') {
            if (arg !== DEEP_ARG) {
                throw BAD_REQUEST_ERR_MSG;
            }
            return this.inDeepMode(value);
        }
        if (typeof options == 'object' || (typeof arg == 'object' && typeof options === 'undefined')) {
            this.optionsObject = options || arg;
            return this.unescapeString(value);
        }
        throw BAD_REQUEST_ERR_MSG;
    };
    /**
     * Unescapes HTML entities from a string.
     * @param {?} rawInput
     * @return {?}
     */
    Unescape.prototype.unescapeString = function (rawInput) {
        return this.optionsObject !== undefined && this.optionsObject !== null ? unescape(rawInput, this.optionsObject) : unescape(rawInput);
    };
    /**
     * Performs HTML unescaping, levels number of times.
     * @param {?} rawInput
     * @param {?} levels
     * @return {?}
     */
    Unescape.prototype.uptoLevel = function (rawInput, levels) {
        var /** @type {?} */ unescapedString = rawInput;
        while (levels--) {
            unescapedString = this.unescapeString(unescapedString);
        }
        return unescapedString;
    };
    /**
     * Performs HTML unescaping untill the string is fully Unescaped.
     * @param {?} rawInput
     * @return {?}
     */
    Unescape.prototype.inDeepMode = function (rawInput) {
        var /** @type {?} */ unescaped = unescape(rawInput);
        while (unescaped.length !== rawInput.length) {
            rawInput = unescaped;
            unescaped = unescape(rawInput);
        }
        return unescaped;
    };
    return Unescape;
}());
var EscapePipe = (function () {
    /**
     * @param {?} escape
     */
    function EscapePipe(escape$$1) {
        this.escape = escape$$1;
    }
    /**
     * Pipe method to HTML escape. Use method it(string, number|string, object) instead.
     * @param {?} value
     * @param {?=} arg
     * @return {?}
     */
    EscapePipe.prototype.transform = function (value, arg) {
        if (value === null || value === undefined) {
            throw "The input value to the pipe must be a string or a string convertible value like number, booleans, etc.";
        }
        return this.escape.it(value.toString(), arg);
    };
    return EscapePipe;
}());
EscapePipe.decorators = [
    { type: Pipe, args: [{
                name: 'escape'
            },] },
];
/**
 * @nocollapse
 */
EscapePipe.ctorParameters = function () { return [
    { type: Escape, },
]; };
var UnescapePipe = (function () {
    /**
     * @param {?} unescape
     */
    function UnescapePipe(unescape$$1) {
        this.unescape = unescape$$1;
    }
    /**
     * Pipe method to HTML unescape. Use method it(string, string|number, object) instead.
     * @param {?} value
     * @param {?=} arg
     * @return {?}
     */
    UnescapePipe.prototype.transform = function (value, arg) {
        if (value === null || value === undefined) {
            throw "The input value to the pipe must be a string or a string convertible value like number, booleans, etc.";
        }
        return this.unescape.it(value.toString(), arg);
    };
    return UnescapePipe;
}());
UnescapePipe.decorators = [
    { type: Pipe, args: [{
                name: 'unescape'
            },] },
];
/**
 * @nocollapse
 */
UnescapePipe.ctorParameters = function () { return [
    { type: Unescape, },
]; };
var pipes = [
    EscapePipe,
    UnescapePipe
];
var services = [
    Escape,
    Unescape
];
var HTMLEscapeUnescapeModule = (function () {
    function HTMLEscapeUnescapeModule() {
    }
    return HTMLEscapeUnescapeModule;
}());
// static forRoot(): ModuleWithProviders {
//   return {
//     ngModule: HTMLEscapeUnescapeModule,
//     providers: [...services]
//   }
// }
HTMLEscapeUnescapeModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: pipes.slice(),
                exports: pipes.slice(),
                providers: services.slice()
            },] },
];
/**
 * @nocollapse
 */
HTMLEscapeUnescapeModule.ctorParameters = function () { return []; };
/**
 * Generated bundle index. Do not edit.
 */
export { HTMLEscapeUnescapeModule, Escape as ɵc, EscapePipe as ɵa, UnescapePipe as ɵb, Unescape as ɵd };
//# sourceMappingURL=html-escape-unescape.es5.js.map
